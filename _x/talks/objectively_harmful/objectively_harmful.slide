###
Objectively Harmful
How inheritance lays a troublesome path.
7 Feb 2019
Tags: intro, type system, inheritance



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* Directive 1

#--
* On Manifestation

"Program to an 'interface', not an 'implementation'." - Gang of Four (Design Patterns)

#--
* What is an Interface?

An interface is a behavior set.

.code ./code/a_interface.go /BGN1/,/END1/

#--
* What is an Implementation?

An implementation is expressed behavior.

.code ./code/b_implementation.go /BGN1/,/END1/

#--
* Directive 1 Restated

Program to required behavior, not particular concretions.

.code ./code/c_howto_notto.go /BGN1/,/END1/

#--
* Benefits of Depending on Interfaces *

- Separation of Concerns
- Encapsulation
- Polymorphism

.caption *These things are not always needed or most convenient.


###
* Directive 2

#--
* On Architecture

"Favor 'object composition' over 'class inheritance'." - Gang of Four (Design Patterns)

#--
* What is an Object?

Broadly; An object has state and behavior.*

.play ./code/d_object.go /BGN1/,/END1/

.caption *See [[https://en.wikipedia.org/wiki/Object_(computer_science)][this link]] for a more nuanced definition.

#--
* What is Composition?

Composition is the sharing of behavior using structural organization.

.image ./img/svg/composition.svg 500 _

#--
* What is a Class?

Not strictly or exhaustively...

- structure declaration (fields)
- assignment of some or all fields
- declaration and assignment of behavior (methods)
- pre-assigned "magic methods" (most are reassignable)
- declaration of taxonomic relationships
- declaration of implemented behavior sets

#--
* What is Inheritance?

Inheritance is the sharing of behavior using taxonomic relationships.

.image ./img/svg/inheritance.svg 500 _

#--
* Directive 2 Restated

When sharing behavior, favor organization over relationships.

#--
* A Closer Look at the OOoptions...

.image https://storage.euggo.org/present/img/closer_look.gif 240 _

###
* Class-based Behavior Sharing

#--
* Class Example

.code ./code/php/a_classes.php /BGN1/,/END1/

#--
* Class Example Output

.code ./code/php/a_classes.php.out

#--
* Class w/Interface

.code ./code/php/b_interface.php /BGN1/,/END1/

#--
* Class w/Interface Output

.code ./code/php/b_interface.php.out

#--
* Class Inheritance (multiple)

.code ./code/php/c_inherit_impossible.php /BGN1/,/END1/

#--
* Class Inheritance (multiple) Output

.code ./code/php/c_inherit_impossible.php.out

_________________________________________________________________________________________________________________________________________________________________________________________________________________

Many languages allow multiple inheritance with varying degrees of rationality.

.image ./img/svg/composition.svg

#--
* Class Inheritance (inline)

.code ./code/php/d_inherit_inline.php /BGN1/,/END1/

#--
* Class Inheritance (inline) Output

.code ./code/php/d_inherit_inline.php.out

#--
* Class Inheritance (inline ramification)

.code ./code/php/e_inherit_inline_drawback.php /BGN1/,/END1/

.code ./code/php/e_inherit_inline_drawback.php /BGN2/,/END2/

#--
* Class Inheritance (inline ramification) Output

.code ./code/php/e_inherit_inline_drawback.php.out

#--
* Class Composition

.code ./code/php/f_composition.php /BGN1/,/END1/

.code ./code/php/f_composition.php /BGN2/,/END2/

#--
* Class Composition Output

.code ./code/php/f_composition.php.out



###
* Prototype-based

#--
* Prototype Example

x

#--
* Prototype Failure

x



###
* Object-based

#--
* Object Example

x

#--
* Object Failure

x



###
* So What?

#--
* [[https://en.wikipedia.org/wiki/Orthogonality#Computer_science][Wikipedia - Orthogonality]]

"Orthogonality is a system design property which guarantees that modifying the technical effect produced by a component of a system neither creates nor propagates side effects to other components of the system. Typically this is achieved through the separation of concerns and encapsulation, and it is essential for feasible and compact designs of complex systems."

#"It is important that we know where we come from, because if you do not know where you come from, then you don't know where you are, and if you don't know where you are, you don't know where you're going. And if you don't know where you're going, you're probably going wrong."
#- Terry Pratchett
