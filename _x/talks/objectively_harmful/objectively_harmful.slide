###
Objectively Harmful
How inheritance lays a troublesome path.
7 Feb 2019
Tags: intro, type system, inheritance



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* Directive 1

#--
* On Manifestation

"Program to an 'interface', not an 'implementation'." - Gang of Four (Design Patterns)

#--
* What is an Interface?

An interface is a behavior set.

.code ./code/a_interface.go /BGN1/,/END1/

#--
* What is an Implementation?

An implementation is expressed behavior.

.code ./code/b_implementation.go /BGN1/,/END1/

#--
* Directive 1 Restated

Program to required behavior, not particular concretions.

.code ./code/c_howto_notto.go /BGN1/,/END1/

#--
* Benefits of Depending on Interfaces *

- Separation of Concerns
- Encapsulation
- Polymorphism

.caption *These things are not always needed or most convenient.


###
* Directive 2

#--
* On Architecture

"Favor 'object composition' over 'class inheritance'." - Gang of Four (Design Patterns)

#--
* What is an Object?

Broadly; An object is an instance of a data structure (state) with behavior.*

.code ./code/d_object.go /BGN1/,/END1/

.caption *See [[https://en.wikipedia.org/wiki/Object_(computer_science)][this link]] for more details.

#--
* What is Composition?

Composition is the sharing of behavior using structural organization.

.image ./img/svg/composition.svg 500 _

#--
* What is a Class?

Not strictly or exhaustively...

- structure declaration (fields)
- assignment of some or all fields
- declaration and assignment of behavior (methods)
- pre-assigned "magic methods" (most are reassignable)
- declaration of taxonomic relationships
- declaration of implemented behavior sets

#--
* What is Inheritance?

Inheritance is the sharing of behavior using taxonomic relationships.

.image ./img/svg/inheritance.svg 500 _

#--
* Directive 2 Restated

When sharing behavior, favor organization over relationships.

#--
* A Closer Look

Let's take at closer look the OO-options...

.image https://storage.euggo.org/present/img/closer_look.gif 240 _

###
* Class-based Behavior Sharing

#--
* Class-based Classes

.code ./code/php/a_classes.php /BGN1/,/END1/

#--
* Class-based Classes Output

.code ./code/php/a_classes.php.out

#--
* Class-based w/Interface

.code ./code/php/b_interface.php /BGN1/,/END1/

#--
* Class-based w/Interface Output

.code ./code/php/b_interface.php.out

#--
* Class-based Inheritance (multiple)

.code ./code/php/c_inherit_impossible.php /BGN1/,/END1/

#--
* Class-based Inheritance (multiple) Output

.code ./code/php/c_inherit_impossible.php.out

_________________________________________________________________________________________________________________________________________________________________________________________________________________

Many languages allow multiple inheritance with varying degrees of rationality.

.image ./img/svg/multi_inheritance.svg

#--
* Class-based Inheritance (inline)

.code ./code/php/d_inherit_inline.php /BGN1/,/END1/

#--
* Class-based Inheritance (inline) Output

.code ./code/php/d_inherit_inline.php.out

#--
* Class-based Inheritance (inline: fail)

.code ./code/php/e_inherit_inline_drawback.php /BGN1/,/END1/

.code ./code/php/e_inherit_inline_drawback.php /BGN2/,/END2/

#--
* Class-based Inheritance (inline: fail) Output

.code ./code/php/e_inherit_inline_drawback.php.out

#--
* Class-based Composition

.code ./code/php/f_composition.php /BGN1/,/END1/

.code ./code/php/f_composition.php /BGN2/,/END2/

#--
* Class-based Composition Output

.code ./code/php/f_composition.php.out



###
* Prototype-based Behavior Sharing

#--
* Prototype-based Example

.code ./code/js/a_prototypes.js

#--
* Prototype-based Example Output

.code ./code/js/a_prototypes.js.out

#--
* Prototype-based w/Interface (sort of)

.code ./code/js/b_interface_sorta.js /BGN1/,/END1/

#--
* Prototype-based w/Interface Output

.code ./code/js/b_interface_sorta.js.out

#--
* Prototype-based Inheritance (multiple)

.code ./code/js/c_inherit_impossible.js /BGN1/,/END1/

#--
* Prototype-based Inheritance (multiple) Output

.code ./code/js/c_inherit_impossible.js.out

.caption silent failure

#--
* Prototype-based Inheritance (inline)

.code ./code/js/d_inherit_inline.js /BGN1/,/END1/

#--
* Prototype-based Inheritance (inline) Output

.code ./code/js/d_inherit_inline.js.out

#--
* Prototype-based Inheritance (inline: ok)

.code ./code/js/e_inherit_ok.js /BGN1/,/END1/

.code ./code/js/e_inherit_ok.js /BGN2/,/END2/

#--
* Prototype-based Inheritance (inline: ok) Output

.code ./code/js/e_inherit_ok.js.out

#--
* Prototype-based Composition

.code ./code/js/f_composition.js /BGN1/,/END1/

.code ./code/js/f_composition.js /BGN2/,/END2/

#--
* Prototype-based Composition Output

.code ./code/js/f_composition.js.out



###
* Object-based Behavior Sharing

#--
* Object-based Example

.code ./code/go/a_structs.go /BGN1/,/END1/

#--
* Object-based Example Output

.code ./code/go/a_structs.go.out

#--
* Object-based w/Interface

.code ./code/go/b_interface.go /BGN1/,/END1/

#--
* Object-based w/Interface Output

.code ./code/go/b_interface.go.out

#--
* Object-based Composition (incomplete)

.code ./code/go/c_composition_incomplete.go /BGN1/,/END1/

#--
* Object-based Composition (incomplete) Output

.code ./code/go/c_composition_incomplete.go.out

#--
* Object-based Composition (working)

.code ./code/go/d_composition.go /BGN1/,/END1/

#--
* Object-based Composition (working) Output

.code ./code/go/d_composition.go.out

#--
* Object-based Composition (success)

.code ./code/go/e_composition_good.go /BGN1/,/END1/

.code ./code/go/e_composition_good.go /BGN2/,/END2/

.code ./code/go/e_composition_good.go /BGN3/,/END3/

#--
* Object-based Composition (success) Output

.code ./code/go/e_composition_good.go.out



###
* So What?

#--
* Composition and Interfaces are Fundamentally Useful

Since 1994 our community has been formally admonished to understand this. Encumbering the use of either composition or inheritance should be considered a severe cost for application development.

.image https://storage.euggo.org/present/img/wrong_turn_somewhere.jpg 360 _

#--
* When Might These Directives Not Apply?

Consider not using interfaces when dealing with:

- optimizations
- scripts
- not fully understood complexity/abstractions

Consider not using composition when dealing with:

- languages that make composition more difficult than workarounds (e.g. traits)

#--
* Are There Any Pertinent Technical Quotes?

"Orthogonality is a system design property which guarantees that modifying the technical effect produced by a component of a system neither creates nor propagates side effects to other components of the system. Typically this is achieved through the separation of concerns and encapsulation, and it is essential for feasible and compact designs of complex systems."

.caption [[https://en.wikipedia.org/wiki/Orthogonality#Computer_science][Wikipedia - Orthogonality]]

.image https://storage.euggo.org/present/img/its_science.gif 300 _

#--
* Are There Any Pertinent Philosophical Quotes?

"It is important that we know where we come from, because if you do not know where you come from, then you don't know where you are, and if you don't know where you are, you don't know where you're going. And if you don't know where you're going, you're probably going wrong." - Terry Pratchett

.image https://storage.euggo.org/present/img/confused_travolta.gif

#--
* Can We See The Multiple Inheritance Graphic Again?

Sure:

.image ./img/svg/multi_inheritance.svg

#--
* Is There A Graphic For "Multiple Composition"?

Yep:

.image ./img/svg/multi_composition.svg

#--
* Are We Finished Here?

If you're done asking questions...

.image https://storage.euggo.org/present/img/malfunction_false.gif
