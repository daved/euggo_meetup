###
Strings And Things
Unicode handling in Go.
2 Aug 2018
Tags: unicode, utf8, rune, string, []byte, slice of bytes



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* Strings

#--
* Let's Handle Some Text!

Request: Make every other letter within a string uppercased.

.image https://storage.euggo.org/present/img/rice_porridge.jpg 460 _

.caption Å være midt i smørøyet. / "To be in the middle of the butter's eye." (To be in a fantastic place.)

#--
* The Plan

- Write a unit test.
- Implement the subroutine.
- Run the unit test.
- Repeat step 2 and 3 as needed.



###
* Unit Testing

#--
* Go has a useful and thorough testing library.

Valid tests:

**- use the prefix "Test".
**- receive a pointer to the testing.T type.

.code a_unit_test/caselib/caselib_test_.go /^func/,//

#--
* Unit tests in Go are data driven.

.code a_unit_test/caselib/caselib_test_.go /BGN2/,/END2/

.caption caselib/caselib_test.go

- A slice (dynamic array) of anonymous structs is assigned to `ds` ("dataset").
- Slice literals and struct literals look similar. Line formatting eases readability.
- Struct field names are not required in cases such as this.

#--
* One Test Framework, Please. Hold The Assertions.

.link https://golang.org/doc/faq#assertions Idiomatic Go favors direct handling of types.

.code a_unit_test/caselib/caselib_test_.go /BGN3/,/END3/

.caption caselib/caselib_test.go

*** As an aside; Third-party assertion libraries:

**- slightly decrease line count.
**- require learning an additional type system.
**- reduce readability.
**- increase character count.
**- introduce a dependency.



###
* First Implementation

#--
* Non Implementation

.code a_unit_test/caselib/caselib.go

.caption caselib/caselib.go

#--
* Run it!

.code a_unit_test/caselib/caselib_test_.go /START1 OMIT/,/END1 OMIT/

.caption caselib/caselib_test.go

.play runtest/a_unit_test/main.go /START1 OMIT/,/END1 OMIT/

*** Tests are normally run from the command line using `go test`.



###
* Second Implementation

#--
* Naive Implementation

.code b_unit_test/caselib/caselib.go /^func/,/^}/

.caption caselib/caselib.go

.play runtest/b_unit_test/main.go /START1 OMIT/,/END1 OMIT/



###
* Dissecting A `string`

#--
* C-style Loop (sliced `string`)

.play c_string_loop/main.go /BGN1/,/END1/

#--
* C-style Loop (`string` index)

.play d_string_loop/main.go /BGN1/,/END1/

#--
* Some `string` Details

- `string` tracks an underlying array of bytes and a length.
- Iterating over a string using an index traverses the underlying array of bytes.

.image https://storage.euggo.org/present/img/string_struct.png _ 264

.caption credit: https://research.swtch.com/godata



###
* Unicode / UTF-8

#--
* Raw Bytes From A String? Let's talk about encodings.

Unicode maps all written characters to numeric values (> 16 bit space). 

The UTF-8 (Unicode Transformation Format 8) encoding:

**- is a way of optimizing (for space) the communication of unicode code points.
**- uses from 1 to 4 bytes to communicate a unicode code point.
**- "flags" the first bits of the first byte within a sequence to indicate sequence length. 

 Character          å
 Name               LATIN SMALL LETTER A WITH RING ABOVE
 Unicode (decimal)  229
 Unicode (binary)   00000000 00000000 00000000 11100101
 UTF-8 (binary)     11000011:10100101
 UTF-8 (decimal)    195:165

#--
* More Unicode Examples

 Character          a
 Name               LATIN SMALL LETTER A
 Unicode (decimal)  97
 Unicode (binary)   00000000 00000000 00000000 01100001
 UTF-8 (binary)     01100001
 UTF-8 (decimal)    97

 Character          勇
 Name               CJK COMPATIBILITY IDEOGRAPH-2F825
 Unicode (decimal)  194597
 Unicode (binary)   00000000 00000010 11111000 00100101
 UTF-8 (binary)     11110000:10101111:10100000:10100101
 UTF-8 (decimal)    240:175:160:165

.caption [[https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement][Wikipedia: CJK Compatability Ideographs Supplement]]

#--
* Even More Unicode Examples

.image https://storage.euggo.org/present/img/unicode_example_1.png _ 600



###
* Dissecting A `string` (Again)

#--
* Range Loop

.play e_string_loop/main.go /BGN1/,/END1/

#--
* Range Loop And `string`

- Ranging over a `string` actively interprets the utf8 encoded bytes.
- The "current index" is tracked/skipped as though iterating over a slice of bytes.
- Instead of the value being a `byte`, the value starting at the index is a `rune`.

*** `byte` is an alias for `uint8` - utf8 uses bytes (8 bits)
*** `rune` is an alias for `int32` - unicode must be within a 32 bit space


###
* Final Implementation(s)

#--
* Obvious Implementation

.code f_unit_test/caselib/caselib.go /^func/,/^}/

.caption caselib/caselib.go

.play runtest/f_unit_test/main.go /START1 OMIT/,/END1 OMIT/

#--
* Improved Implementation

.code g_unit_test/caselib/caselib.go /^func/,/^}/

.caption caselib/caselib.go

.play runtest/g_unit_test/main.go /START1 OMIT/,/END1 OMIT/

Provided by Nilium via #go-nuts on freenode.net:

.link https://github.com/nilium Github/nilium
.link https://twitter.com/nilium Twitter/nilium
