###
Testable Code
The Discipline of Decomposition
5 Dec 2019
Tags: testing, function, decomposition, unit, surface, functional, behavioral, integration, construction, end-to-end, integrated



###
Daved
disjuncter@gmail.com
https://github.com/daved
@daveddev



###
* Isolates In Programming

#--
* A List Of Programming Mechanism Types

.image https://storage.euggo.org/present/img/testable/mechanisms.jpg 280 _

- Simplex
- Complex
- Multicomplex
- Hypercomplex

#--
* What Is A Hypercomplex?

Applied combined complex behavior.

Analogs:

- Blenders
- Monitors
- Amplifiers
- Cell Phones
- Desktop Computers

.image https://storage.euggo.org/present/img/testable/ibm_ps2_computers.jpg 180 _

#--
* Hypercomplex

Example: Completed Program/Application

  $ go build
  $ ./mysvc renew XYZ123

Test Type: End-To-End

#--
* What Is A Multicomplex?

Combined complex behavior.

Analogs:

- Single-board Computers (SoC)
- Backplanes (bus/expansion)
- Expandable Computers (motherboard)

.image https://storage.euggo.org/present/img/testable/boards.jpg 280 _

#--
* Multicomplex

Example: A type with methods (complex dependencies)

  type Service struct {
      cPrv ComputeProvider
      dPrv DatabaseProvider
  }
  
  func NewService(cPrv ComputeProvider, dPrv DatabaseProvider) (*Service, error)
  
  func (s *Service) HandleUsername(user string) error
  func (s *Service) HandleToken(token string) error

Test Type: Integration

#--
* What Is A Complex?

Complex behavior.

Analogs:

- Discrete Circuits (logic gate, signal amplifier, etc.)
- Monolithic Integrated Circuits (microchip, microcontroller)

.image https://storage.euggo.org/present/img/testable/integrated_circuit_detail.jpg 220 _

#--
* Complex

Example: A type with methods (simple dependencies)

  type Compute struct {
      rCache map[string]string
      pCache map[string]string
      expiry time.Duration
  }
  
  func NewCompute(expiry time.Duration) (*Compute, error)
  
  func (c *Compute) Rough(in string) (out string, err error)
  func (c *Compute) Precise(in string) (out string, err error)

Test Type: Functional, Behavioral

#--
* What Is A Simplex?

Simple behavior.

Analogs:

- Components (resistor, transistor, etc.)

.image https://storage.euggo.org/present/img/testable/components.jpg 380 _

#--
* Simplex (Example)

A function.

  func filterOdd(in []int) (out []int)

Test Type: Unit



###
* Isolating Through Decomposition

#--
* Problem To Hypercomplex

From idea to product:

- Business Requirements
- Organizational Barriers
- Technical Barriers

#--
* Hypercomplex To Multicomplex

From product to systems of systems:

- Organizational Barriers
- Technical Barriers
- Maintenance Requirements

#--
* Multicomplex To Complex

From systems of systems to systems:

- Technical Barriers
- Maintenance Requirements
- Solution Resolution

#--
* Complex To Simplex

From systems to components:

- Technical Barriers
- Maintenance Requirements
- Solution Resolution



###
* Expediting Decomposition

#--
* When To Not Be Concerned

- Writing simple scripts
- Consciously omitting tests
- Prototyping/experimenting

#--
* When To Be Concerned

- Writing complex applications
- Ensuring correctness
- Ensuring robustness

#--
* Structure/Surface Concerns

- Formalization #data/control description
- Contextualization #data/control lifetime management

#--
* Behavior/Substance Concerns

- Construction #new/make funcs - concrete return
- Mutation #unmarshal/setter funcs - self-mutating
- Exposition #marshal/getter funcs - self-reporting
- Selection #new funcs - variable return
- Orchestration #order funcs - channel return
- Articulation #func funcs - function return
- Computation #calc funcs
- Junction #mux funcs
- Reception #receive funcs
- Delegation #send funcs
- Direction #handler funcs

#--
* Broader Concerns To Reassess Often

- What is this?
- Can it do less?
- Can it know less?
- Can the execution context be smaller?
- Is it readable?
- Is fully correct?



###
* X

#--
* Multimeter and electronics example

test
