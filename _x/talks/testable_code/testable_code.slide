###
Testable Code
The Discipline of Decomposition
5 Dec 2019
Tags: testing, function, decomposition, unit, surface, functional, behavioral, integration, construction, end-to-end, integrated



###
Daved
disjuncter@gmail.com
https://github.com/daved
@daveddev



###
* Isolates In Programming

#--
* A List Of Programming Mechanism Types

.image https://storage.euggo.org/present/img/testable/mechanisms.jpg 280 _

- Simplex
- Complex
- Multicomplex
- Hypercomplex

#--
* What Is A Hypercomplex?

Applied combined complex behavior.

Analogs:

- Blenders
- Monitors
- Amplifiers
- Cell Phones
- Desktop Computers

.image https://storage.euggo.org/present/img/testable/ibm_ps2_computers.jpg 180 _

#--
* Hypercomplex

Example: Completed Program/Application

  $ go build
  $ ./mysvc renew XYZ123

Test Type: End-To-End

#--
* What Is A Multicomplex?

Combined complex behavior.

Analogs:

- Single-board Computers (SoC)
- Backplanes (bus/expansion)
- Expandable Computers (motherboard)

.image https://storage.euggo.org/present/img/testable/boards.jpg 280 _

#--
* Multicomplex

Example: A type with methods (complex dependencies)

  type Service struct {
      cPrv ComputeProvider
      dPrv DatabaseProvider
  }
  
  func NewService(cPrv ComputeProvider, dPrv DatabaseProvider) (*Service, error)
  
  func (s *Service) HandleUsername(user string) error
  func (s *Service) HandleToken(token string) error

Test Type: Integration

#--
* What Is A Complex?

Complex behavior.

Analogs:

- Discrete Circuits (logic gate, signal amplifier, etc.)
- Monolithic Integrated Circuits (microchip, microcontroller)

.image https://storage.euggo.org/present/img/testable/integrated_circuit_detail.jpg 220 _

#--
* Complex

Example: A type with methods (simple dependencies)

  type Compute struct {
      rCache map[string]string
      pCache map[string]string
      expiry time.Duration
  }
  
  func NewCompute(expiry time.Duration) (*Compute, error)
  
  func (c *Compute) Rough(in string) (out string, err error)
  func (c *Compute) Precise(in string) (out string, err error)

Test Type: Functional, Behavioral, "Surface"?

#--
* What Is A Simplex?

Simple behavior.

Analogs:

- Components (resistor, transistor, etc.)

.image https://storage.euggo.org/present/img/testable/components.jpg 380 _

#--
* Simplex (Example)

A function.

  func filterOdd(in []int) (out []int)

Test Type: Unit



###
* Decomposing Isolates

#--
* Problem To Hypercomplex

.html html/problem_to_hypercomplex.html

Concerns when moving from idea to product:

- Business Requirements
- Organizational Barriers
- Technical Barriers

- Deployment/Delivery
- Maintenance
- Openness

#--
* Hypercomplex To Multicomplex

.html html/hypercomplex_to_multicomplex.html

Concerns when moving from product to systems of systems:

- Organizational Barriers
- Technical Barriers
- Maintenance Requirements

- Maintenance
- Openness

#--
* Multicomplex To Complex

.html html/multicomplex_to_complex.html

Concerns when moving from systems of systems to systems:

- Technical Barriers
- Maintenance Requirements

- Maintenance
- Openness

#--
* Complex To Simplex

.html html/complex_to_simplex.html

Concerns when moving from systems to components:

- Technical Barriers
- Maintenance Requirements

- Maintenance
- Openness



###
* Decomposition Of Coded Solutions

#--
* When Not To Decompose

- Writing simple scripts
- Consciously omitting tests
- Prototyping/experimenting

#--
* When To Decompose

- Writing complex applications
- Ensuring correctness
- Ensuring robustness

#--
* How To Decompose

- Clarify purpose
- Control scope

.caption "Everything should be as simple as it can be, but not simpler. - Einstein, probably"

#--
* Clarifying Behavior/Substance (Purpose)

- Construction | new/make funcs, concrete return
- Selection | new funcs, variable return
- Orchestration | order funcs, channel return
- Articulation | func funcs, function return
- Mutation | unmarshal/setter funcs, self-mutating
- Exposition | marshal/getter funcs, self-reporting
- Computation | calc funcs, pure
- Junction | mux funcs, flow
- Direction | handler funcs, flow
- Reception | receive funcs, i/o
- Delegation | send funcs, i/o

#--
* Controlling Structure/Surface (Scope)

- Formalization | data/access description
- Contextualization | data/access lifetime management

#--
* Design Guidelines Before Integration Testing Multicomplexes

(i.e. APIs with complex dependencies)

- Prioritize "form" and "context"
- Dependencies should be easily mocked
- Mocks should be able to be as simple as possible while exercising purpose

.image https://storage.euggo.org/present/img/testable/boards.jpg 280 _

#--
* Design Guidelines Before Surface Testing Complexes

(i.e. APIs with simple dependencies)

- Prioritize "form" and "context"
- Empathize with callers - i.e. Focus methods on usability
- Methods should call underlying functions to narrow scope

.image https://storage.euggo.org/present/img/testable/integrated_circuit_detail.jpg 220 _

#--
* Design Guidelines Before Unit Testing Simplexes

(i.e. Simple functions)

- Prioritize pure function design
- Keep the Unix Philosophy (do one thing and do it well)
- Disregard caller convenience in favor of testability (that's what exported APIs are for)

.image https://storage.euggo.org/present/img/testable/components.jpg 380 _

#--
* More Broadly; Reassess Often

- What is this?
- Can it do less?
- Can it know less?
- Can the execution context (scope) be smaller?
