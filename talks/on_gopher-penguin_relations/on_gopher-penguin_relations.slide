###
On Gopher-Penguin Relations
An Intro To Go For Linux Users.
7 Mar 2017
Tags: introduction, getting started, linux



###
Daved
disjuncter@gmail.com
https://github.com/daved
https://github.com/codemodus



###
* What Is Go?

.background https://storage.euggo.org/present/img/gogame_topgrdnt.jpg

#--
* A Little Of This, A Little Of That

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

.link https://golang.org - Golang.org/

- Released November 11th, 2009
- Created by Rob Pike, Ken Thompson, and Robert Griesemer
- In the C family; Influenced by Pascal/Modula/Oberon + CSP (Newsqueak/Limbo)
- Supported by Google

: - Go is {n} years old.
: - Authors
: - ├ Pike/Thompson established/contributed to *nix world.
: - └ Griesemer handled interpreters, files systems, and virtual machines. 
: - Conc based on Hoare's "Communicating Sequential Processes" (1985 book, not 1978 paper).
: - Supported by, but not controlled by Google; A mostly certain and open source future.

#--
* Language Overview

- Strongly, and statically typed
- Compiled (with runtime)
- Compiled quickly
- Garbage collected
- OO-like
- Concurrent

: - Type system prevents certain classes of errors.
: - No VM! Smallish binaries.
: - Compiler always being improved (was bootstrapped at 1.4).
: - GC also always being improved with large gains (sub millisecond stop-the-worlds)
: - OOP possible, but has no classes. Typically few self-referential returns (e.g. This.Do.DoAnother).
: - * Concurrency is not parallelism. Single core machines handle code synchronously.



###
* Please, Tell Us More...

.background https://storage.euggo.org/present/img/tellmemore_topgrdnt.jpg

#--
* How did Go come to be?

Not exhaustively...

Ken Thompson is the author of B, the predecessor to C.  He was also a colleague of C author Dennis Ritchie.  Together they developed UNIX.

Alongside them at Bell Labs Rob Pike co-authored UTF-8 with Ken Thompson, developed Limbo, contributed to portions of UNIX, and wrote influential books on UNIX/programming with Brian W. Kernighan.

Robert Griesemer has worked on code generation for the V8 JS engine, the Java Hotspot VM, and a distributed lock manager for the Google File System.

#--
* How does Go excel?

Go is optimized for developers and modern processing

- Keyword count is low (25 vs [Python 33, Ruby 41, C 44, Java 50, PHP 65, C++ 84])
- Standard library is often enough
- Inheritance does not exist
- Memory management is a non-issue
- Codebases are often cross-platform without additional work
- Concurrency is baked-in and primitives are reasonable
- Tooling prevents certain disputes: gofmt, go vet, golint
- Tooling eases documentation/testing: go doc, go test
- Runtime is included with binaries and they run quickly

: - Mins complexity for devs. Maxes rate of consumption and improves digestion.
: - Beyond stdlib, most commonly used packages are exceptionally stable.
: - James Gosling (Java) advocated to replace implemenation inhtce (extends) with interface inhtce (implements).
: - ├ "Implements" in go is implicit.
: - └ Gang of Four "mantra" - "prefer composition over inheritance".
: - No memory management. Hooray!
: - Cross-platform edge cases can be worked around. 
: - Concurrency can be fun, novel, and therefore easy to abuse/confuse initially. 
: - Tooling integrates easily with editors/ides. Run on save: save your work, time and sanity.
: - Cross-platform, and fast binaries... but for what architectures?

#--
* How does Go excel? (OS/Arch list)

    OS          Architecture
    ---------   ------------
    android     arm
    darwin      386, amd64, arm, arm64
    dragonfly        amd64
    freebsd     386, amd64, arm
    linux       386, amd64, arm, arm64, ppc64, ppc64le, mips, mipsle, mips64, mips64le
    nacl        386,        arm, amd64p32 (64 bit arch w/only 4GB addressable)
    netbsd      386, amd64, arm
    openbsd     386, amd64, arm
    plan9       386, amd64
    solaris          amd64
    windows     386, amd64



###
* El Porqué (The Forwhat)

.background https://storage.euggo.org/present/img/mariachi.jpg

#--
* Why did Go come to be?

"No major systems language has emerged in over a decade, but over that time the computing landscape has changed tremendously. ...  We believe it's worth trying again with a new language, a concurrent, garbage-collected language with fast compilation."

.link https://golang.org/doc/faq#What_is_the_purpose_of_the_project - Golang.org/doc/faq#What_is_the_purpose_of_the_project

A much more expansive answer to this question is available in the article, [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering.]]

#--
* Why use Go?

- Minimize development and maintenance time
- Make full use of modern processors
- Encourage testable code
- Improve documentation
- Reduce overhead when portability is needed



###
* Getting Started

.background https://storage.euggo.org/present/img/started.jpg

#--
* Installing Dependencies (apt)

Version Control:

   sudo apt install git mercurial

#--
* Installing Go (Linux)

Using Binary Releases:

    target=https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz   
    wget ${target}   
    sudo tar -C /usr/local -zxf $(basename ${target})   
    rm $(basename ${target})

- Building from source is possible, but isn't interesting enough to cover at this time.

Setup PATH/GOPATH:

    mkdir ~/gocode
    echo -e "\n"'export GOPATH=${HOME}/gocode' >> ~/.profile
    echo 'export PATH=${PATH}:/usr/local/go/bin:${GOPATH}/bin' >> ~/.profile
    . ~/.profile

: - PATH is obvious for most, but what about GOPATH?
: - └ GOPATH is location of go source. Can be multiple dirs, best to centralize.
: - - └ Important later depending on package vendoring solution.

#--
* Additional Environment Variables (Linux)

GOROOT is only relevant when installing Go to a non-standard location.

    // Example of setting GOROOT - *Not likely needed*
    echo -e "\n"'export GOROOT=${HOME}/go' >> ~/.profile && source ~/.profile

: - Go source code is sum of /usr/local/go/src, or ${GOROOT}/src if GOROOT is set, plus ${GOPATH}/src.
: - PATH: binaries, GOPATH: user controlled source (import, build, etc), GOROOT: alternate install loc.

#--
* Uninstalling Go

- Remove `/usr/local/go` or custom GOROOT directory.
- Remove GOPATH export, and GOROOT export if existing. 
- Remove Go-related paths from PATH environment variable.

#--
* IDE or editor?  Either way.

The tools offered by the Go Team and the community cover so much ground that there is no great distinction between the capabilities of IDEs and text editors (apart from the interfaces).

For example, the following is a list of tools available in Vim using vim-go.

GoBuild, GoDeps, GoFmt, GoInfo, GoPath, GoTestFunc, GoCallees, GoDescribe, GoFreevars, GoInstall, GoPlay, GoUpdateBinaries, GoCallers, GoDoc, GoGenerate, GoInstallBinaries, GoReferrers, GoVet, GoCallstack, GoDocBrowser, GoImplements, GoLint, GoRename, GoChannelPeers, GoDrop, GoImport, GoMetaLinter, GoRun, GoCoverage, GoErrCheck, GoImportAs, GoOracleScope, GoTest, GoDef, GoFiles, GoImports, GoOracleTags, GoTestCompile



###
* Hello, Eugene

.background https://storage.euggo.org/present/img/hello_eugene.jpg

#--
* Hello World (stdout)

.play hw_stdout/main.go

: - Binaries are all named "main". Libs named most anything, keep it simple.

#--
* Hello World (stderr)

.code hw_stderr/main.go

: - Fprint{,ln} will write to any provided io.Writer.
: - Subsequent arguments can be of any empty interface type.

#--
* Hello World (fmt.Fprintln And io.Writer Definitions)

.code hw_stderr/extra.go /START1 OMIT/,/END1 OMIT/

.caption Defined in "fmt".

.code hw_stderr/extra.go /START2 OMIT/,/END2 OMIT/

.caption Defined in "io".

: - Again, the Fprintln func is defined as taking an io.Write. 
: - The "triple dot" notation indicates that a variable amount of arguments can be provided.
: - An empty interface is easy to satisfy as it has no methods.  So, send it whatever.
: - An io.Writer is defined as any type which has a Write method with the shown definition.

#--
* Hello World (os.Stderr Def And os.File Implementation Of io.Writer)

.code hw_stderr/extra.go /START3 OMIT/,/END3 OMIT/

.caption Defined in "os".

.code hw_stderr/extra.go /START4 OMIT/,/END4 OMIT/

.caption Defined in "os".

: - os.Stderr is an os.File, and an os.File satisfies the io.Writer interface.

#--
* Hello World (stderr) Second Look

.play hw_stderr/main.go

: - Again, what's important to know here is that os.Stderr is an os.File and an os.File satisfies the io.Writer interface, so it can be used as the first argument to fmt.Fprintln.
: - The remaining arguments will be written to os.Stderr.

#--
* Hello World (http)

.code hw_httpa/main.go /START1 OMIT/,/END1 OMIT/ HLmain

: - We see, package declaration, and import declarations.
: - We also see the helloHandler function, but let's skip over it for now.
: - In our main function, we create a multiplexer using the NewServeMux function from the http library.
: - Then the helloHandler is assigned as the endpoint to handle requests made for the "slash" route.
: - Please note that functions are first-class and often used as such. It's not abnormal for funcs to return funcs that return funcs, etc.
: - Finally, we send the multiplexer to the ListenAndServe function from the http library.
: - ListenAndServe takes a port (as a string), and any type which satisfies the http.Handler interface.
: - mux is, in fact, an http.Handler.

#--
* Hello World (http.Handler Definition And ServeMux Implementation)

.code hw_httpa/extra.go /START1 OMIT/,/END1 OMIT/

.code hw_httpa/extra.go /START2 OMIT/,/END2 OMIT/

.caption Defined in "net/http".

: - Anything that has a ServeHTTP method that follows this signature is an http.Handler.
: - Clearly, the ServeMux is an http.Handler.
: - Within these definitions, we need to take note of the http.ResponseWriter interface, and the http.Request type.
: - We'll skip their definitions for now, but do keep in mind that the ResponseWriter can be treated as a plain io.Writer.,

#--
* Hello World (http.HandlerFunc Definition)

.code hw_httpa/extra.go /START3 OMIT/,/END3 OMIT/

.caption Defined in "net/http".

: - Also worth noting is that any function which has this signature can be converted to a http.HandlerFunc.
: - An http.HandlerFunc receives an http.ResponseWriter and a pointer to an http.Request, exactly as the ServeHTTP method does.

#--
* Hello World (http Handler/HandlerFunc)

.code hw_httpb/main.go /START1 OMIT/,/END1 OMIT/ HLhandler

: - The line highlighted within the main function shows how one would manually convert their own function to a http.HandlerFunc.
: - In the first display of this code, the commented out line had been used. The ServeMux HandleFunc method automatically converts any provided handler as a convenience.
: - Because we can treat the ResponseWriter the same as any io.Writer, we can simply use fmt.Fprintln to write out some data.

#--
* Hello World (http) / Run It!

.play hw_httpa/main.go /START1 OMIT/,/END1 OMIT/

.link http://localhost:8789

: - Working backward ...
: - Starting with ListenAndServe, we see that an http Handler is needed.
: - A ServeMux is an http Handler.
: - ServeMux multiplexes requests based on the request URL Path, and hands the ResponseWriter and *Request to the provided http HandlerFunc.
: - Flow then enters the helloHandler, and the request is served.



###
*  ̶B̶a̶s̶e̶d̶ ̶D̶a̶t̶a̶ Databases

.background https://storage.euggo.org/present/img/data2.gif

#--
* Using A Database

.play db0/main.go /START OMIT/,/END OMIT/

: - package and import declarations are excluded.
: - Single line assignment/conditionals save room. Use wisely due to scoping.
: - First, open a connection to a database. This normally returns a pool of connections.  Calls made to db are asynchronous and the ordering is handled by each database implementation, just as one would expect.
: - "defer" allows the calling of a function upon the completion of a function's context regardless of exit point. This can prevent quite a bit of duplication.
: - After obtaining "rows" from a database query, we can iterate over the values and scan them into variables for printing.
: - Of course, if any errors are encountered, we handle them.


###
###### FOLLOWING LINE INCLUDE INVISIBLE TIMES (U+2062)
* ⁢

.background https://storage.euggo.org/present/img/testing.jpg

#--
* Testing (Basis)

.code work/work.go

.caption "work/work.go"

: - This is the basis of the following test.  It's obviously useless.  So, let's test it.

#--
* Testing (Test Func)

.code work/work_test.go

.caption "work/work_test.go"

: - Testing facilities are mostly aimed at unit testing.
: - Functional testing is not too hard.
: - Unit testing is usually done within the same package.
: - Functional testing can be done within the same package, and is often done as a secondary package name as "package name - underscore - test". This can help ensure that the usage of one's library is obeying the boundaries of the API.
: - Integration testing might require creativity, or an integ testing tool.

#--
* Testing Commands
Run all tests:

    go test

Run any tests with "Add" in function name:

    go test -run=Add



###
* Deployment

.background https://storage.euggo.org/present/img/butterfly_release.jpg

#--
* Some Random Deployment Options

- scp + service restart
- blueGreen to minimize downtime/risks.
- wercker/heroku/google app engine
- {Insert your fav CI service here}
- Have complex needs or simply like config files? The cloud is the limit.

: There are many options. Take your pick.

#--
* Deployment (Example systemd Unit File)

.code systemd/gosysd.service



###
* Code Wrap-Up

.background https://storage.euggo.org/present/img/wrapping.jpg

#--
* App Ready For Service

.iframe systemd/main.go.html 576 980



###
* Resources

.background https://storage.euggo.org/present/img/connected.jpg

#--
* Online Resources

- [[https://golang.org/][The front door: golang.org]]
- [[https://play.golang.org/][The playground: play.golang.org]]
- [[https://meetup.euggo.org/][This presentation and others: meetup.euggo.org]]
- #go-nuts on irc.freenode.net
- [[https://reddit.com/r/golang][Go on Reddit]]
- [[https://groups.google.com/group/golang-nuts][Go Nuts mailing list]]
- [[https://forum.golangbridge.org/][Go Forum]]
- [[https://blog.gopheracademy.com/gophers-slack-community/][Gopher's slack community]]

#--
* Online Resources For Offline Resources

- [[http://www.gopl.io/][The Go Programming Language - Alan A. A. Donovan, Brian Kernighan]]
- [[https://www.meetup.com/eug-go][Go in Eugene (Meetup.com)]]
- [[https://www.euggo.org][Go in Eugene (homepage)]]
