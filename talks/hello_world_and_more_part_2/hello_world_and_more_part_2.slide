###
Hello World And More (Part 2)
Basic examples of Go code.
3 Mar 2016
Tags: introduction, code examples



###
Daved
disjuncter@gmail.com
https://github.com/daved
https://github.com/codemodus



###
* Sequences And Maps

#--
* Sequences (Array)

.play array_a/main.go /START OMIT/,/END OMIT/

Or:

.play array_b/main.go /START OMIT/,/END OMIT/

#--
* Sequences (Slice)

.play slice_a/main.go /START OMIT/,/END OMIT/

Also:

.play slice_b/main.go /START OMIT/,/END OMIT/

Arrays are the underlying type of slices.  They are managed by the runtime.

.link https://blog.golang.org/go-slices-usage-and-internals Go Slices: usage and internals

#--
* Maps

.play map_a/main.go /START OMIT/,/END OMIT/



###
* Return Values And Errors

#--
* Return Values

.play return_values/main.go /START OMIT/,/END OMIT/

- Discarding return values is perfectly valid
- Don't be in the habit of discarding errors

#--
* Errors

.code errors/murphy

.play errors/main.go /START OMIT/,/END OMIT/

- Ignoring errors will ruin maintainability and readability
- Ensuring that errors are handled encourages better design
- Don't panic

#--
* Errors (shortened)

.code errors/main.go /START OMIT/,/END OMIT/

.code errors_shortened/main.go /START OMIT/,/END OMIT/

*** Assignments can be combined with a conditional.

- Be aware of scope limitation

#--
* Defined Errors

.play errors_defined/main.go /START OMIT/,/END OMIT/



###
* defer, panic, recover

#--
* defer

.play defer/main.go /START OMIT/,/END OMIT/

- defer stores functions LIFO
- Deferred functions are ran at the termination of the surrounding function

#--
* defer and loops

.play defer_loops_a/main.go /START OMIT/,/END OMIT/

- Parameters are evaluated when defer is called, not when the deferred function is called - Use a closure to change this behavior

.play defer_loops_b/main.go /START OMIT/,/END OMIT/

#--
* Oh, yeah, loops.

While:

.play loops_a/main.go /START OMIT/,/END OMIT/

Forever:

.play loops_b/main.go /START OMIT/,/END OMIT/

#--
* Panic/Recover (It does serve a purpose!)

- Recover from the exceptional
- Errors are not exceptional, they are typical

#--
* Panic/Recover (Example)

.play panic_recover/main.go /START OMIT/,/END OMIT/



###
* Expected Functions

#--
* main/init

- Reserve init func usage for libraries which truly need pre-main activity
- main funcs should not need to be tested, they should be populated with tested code
- Avoid globals in applications to simplify testing (An exception to this might be within a small lib)

.code main_init/main.go /START OMIT/,/END OMIT/



###
* Goroutines and Channels

#--
* Goroutines vs Blocking Code

.play goroutines_a/main.go /START OMIT/,/END OMIT/

#--
* Goroutines Sync

- If main exits while goroutines are running, they are killed - sync them

.play goroutines_b/main.go /START OMIT/,/END OMIT/

#--
* Channels (It won't blend)

.play channels_a/main.go /START OMIT/,/END OMIT/

#--
* Channels (Release the pressure)

.play channels_b/main.go /START OMIT/,/END OMIT/

#--
* Channels (A closer look)

.play channels_c/main.go /START OMIT/,/END OMIT/

#--
* Channels And Select

.play chan_select_a/main.go /START OMIT/,/END OMIT/

*** tick and boom are both instances of "chan time.Time"



###
* References

#--
* Official Docs

.link https://tour.golang.org Tour of Go

.link https://golang.org/doc/code.html How To Write Go Code

.link https://golang.org/doc/effective_go.html Effective Go

.link https://golang.org/ref/spec Go Language Spec

.link https://golang.org/ref/mem Go Memory Model

#--
* Official Blog

.link https://blog.golang.org/go-slices-usage-and-internals Go Slices: usage and internals

.link https://blog.golang.org/error-handling-and-go Error Handling In Go

.link https://blog.golang.org/errors-are-values Errors Are Values

.link https://blog.golang.org/defer-panic-and-recover Defer, Panic, Recover

.link https://blog.golang.org/pipelines Go Concurrency Patterns: Pipelines

#--
* Un-official Blog (articles noted during creation of slides)

.link https://gobyexample.com/mutexes Mutexes (Ordering Concurrent Access)

.link http://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/ Testing And Interfaces

.link http://www.goinggo.net/2014/05/methods-interfaces-and-embedded-types.html Methods, Interfaces, And Embedded Types In Go

