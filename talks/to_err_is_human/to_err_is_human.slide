###
To Err Is Human
if err != nil { /* again? really? */ }
1 Nov 2018
Tags: intro



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* Errors Are Values

#--
* First, For Our Own Mindfulness

"There are two methods in software design. One is to make the program so simple, there are obviously no errors. The other is to make it so complicated, there are no obvious errors."
- Tony Hoare (1934-)

#--
* The `error` Interface

  type error interface {
      Error() string
  }

#--
* A Simple `error` Implementation

.code code/novel/error.go /BGN1/,/END1/

#--
* A Simple `error` In Use

.play code/novel/cmd/errexamp/main.go /BGN/,/END/

Any type implementing the `error` interface can be sent to a print function and it's `Error()` method will be used. The same goes for any type implementing the `fmt.Stringer` interface and it's `String()` method.

#--
* "Sentinel" Errors

.code code/novel/error.go /BGN2/,/END2/

#--
* Sentinel Errors In Use

.play code/novel/cmd/errcomp/main.go /BGN/,/END/

#--
* A Complex `error` Implementation

.code code/novel/error.go /BGN3/,/END3/

#--
* A Complex `error` Helper

.code code/novel/error.go /BGN4/,/END4/

#--
* A Complex `error` In Use

.play code/novel/cmd/erradv/main.go /BGN/,/END/

#--
* Scoping Errors In Uninteresting Cases

.play code/novel/cmd/errscp/main.go /BGN/,/END/

#--
* Scoping Errors In Interesting Cases

Consider using [[https://github.com/pkg/errors][github.com/pkg/errors]].



###
* Error Values Are Valuable

#--
* Why Not Ignore Errors?

"Those who fail to plan are planning to fail."
- Unknown/Many

#--
* Assurable Control Flow

.code code/d_maybex/main.go /BGN/,/END/

Avoid nil-related errors. Compare with Elm:

.code code/d_maybex/src/maybex.elm /BGN/,/END/

#--
* Flexible Control Flow

.code code/e_typd/main.go /BGN/,/END/

Define behavior based on distinct possiblities. Compare with Python:

.code code/e_typd/typd.py /BGN/,/END/

#--
* Sensible Control Flow

.code code/f_blog/scanner.go /BGN/,/END/

`Scan()` will return false and halt the loop when there is no more data to scan, or if an error was encountered during the last token access.

Error handling takes place outside of the scanning loop. Most forms of error handling repetition can be mitigated in a similar manner.


###
* Plan For Failures

#--
* Planning

"The wise man bridges the gap by laying out the path by means of which he can get from where he is to where he wants to go."
- J. P. Morgan (1837-1913)

#--
* A Simple Plan

.image svg/plan_short_part.svg 510 _

#--
* Manifesting A Simple Plan

We're interested in:

- Terminal Output
- OutFile Contents ("out.txt")
- DataStore State ("datastore.dat")

.code code/cmd/simple_plan/main.go /^func main/,/^}/

#--
* A Simple Plan (Output)

terminal:
.code code/cmd/simple_plan/terminal

out.txt:
.code code/cmd/simple_plan/out.txt

datastore.dat:
.code code/cmd/simple_plan/datastore.dat

#--
* Manifesting An Improved Simple Plan

.code code/cmd/simple_plan_improved/main.go /^func main/,/^}/

`defer` manages a stack (LIFO) of functions called once the local scope ends.

#--
* A Contingent Plan

.image svg/plan_short_errs.svg 510 _

#--
* Manifesting A Contingent Plan

.code code/cmd/contingent_plan/main.go /^func main/,/^}/

#--
* A Contingent Plan (Output)

terminal:
.code code/cmd/contingent_plan/terminal

out.txt:
.code code/cmd/contingent_plan/out.txt

datastore.dat:
.code code/cmd/contingent_plan/datastore.dat

#--
* A Contingent Plan (Output - Failure At `NewOutFile`)

terminal:

 2018/11/08 19:00:00 cannot create OutFile: open out.txt: permission denied

out.txt:
.code code/empty/empty

datastore.dat:
.code code/empty/empty

An empty "out.txt" is expected, but where's the behavior setup via `defer`?

#--
* Avoid Brutal Control Flow

Functions setup via `defer` will not be reached when using `panic`, or `os.Exit`.

`log.Fatal` functions print to `os.Stderr` and call `os.Exit(1)`.

.play code/a_brutal_control_flow/main.go /BGN/,/END/

#--
* Favor Graceful Control Flow

Move main logic out one level from the main func, but keep it nearby.

.play code/b_graceful_control_flow/main.go /BGN/,/END/

#--
* Graceful Flow With Codes

.play code/c_graceful_control_flow/main.go /BGN/,/END/

#--
* A Complete Plan

.image svg/plan_short_full.svg 510 _

#--
* Manifesting A Complete Plan

.code code/cmd/complete_plan/main.go /^func run/,/^}/

#--
* A Complete Plan Output

terminal:
.code code/cmd/complete_plan/terminal

out.txt:
.code code/cmd/complete_plan/out.txt

datastore.dat:
.code code/cmd/complete_plan/datastore.dat

#--
* A Complete Plan (Output - Failure At NewOutFile)

terminal (last line is from stderr):
.code code/cmd/complete_plan/error_output_of/terminal

out.txt:
.code code/empty/empty

datastore.dat:
.code code/cmd/complete_plan/error_output_of/datastore.dat

While an error was reached, everything has been accounted for.

#--
* A Complete Plan (Output - Failure At NewDataStore)

terminal (last line is from stderr):
.code code/cmd/complete_plan/error_output_ds/terminal

out.txt:
.code code/empty/empty

datastore.dat:
.code code/cmd/complete_plan/error_output_ds/datastore.dat

While an error was reached, everything has been accounted for.



###
* Takeaways

#--
* Errors Are Values

"No problem can be solved until it is reduced to some simple form. The changing of a vague difficulty into a specific, concrete form is a very essential element in thinking."
- J. P. Morgan (1837-1913)

#--
* Errors Values Are Valuable

If

"Those who fail to plan are planning to fail."

Then

Plan to succeed by planning for failures.

#--
* Plan For Failures

"If you do not expect the unexpected you will not find it, for it is not to be reached by search or trail."
- Heraclitus (535-475 BCE)



###
* One More Thing

#--
* When is `nil` not `nil`?

Interfaces have two elements, a type and a value. Both elements of an `error` must be `nil` for the error to equal `nil`.

Always return an explicit `nil`.

.code code/g_nil/main.go /BGN1/,/END1/

Never return a typed `nil` even if the value is `nil`.

.code code/g_nil/main.go /BGN2/,/END2/
