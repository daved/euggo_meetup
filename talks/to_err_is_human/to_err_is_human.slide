###
To Err Is Human
if err != nil { // again? really? }
1 Nov 2018
Tags: intro



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* Planning For Failures

#--
* Planning

"The wise man bridges the gap by laying out the path by means of which he can get from where he is to where he wants to go." - J. P. Morgan (1837-1913)

#--
* A Simple Plan

.image svg/plan_short_part.svg 510 _

#--
* Manifesting A Simple Plan

We're interested in:

- Terminal Output
- OutFile Contents ("out.txt")
- DataStore State ("datastore.dat")

.code code/cmd/simple_plan/main.go /^func main/,/^}/

#--
* A Simple Plan (Output)

terminal:
.code code/cmd/simple_plan/terminal

out.txt:
.code code/cmd/simple_plan/out.txt

datastore.dat:
.code code/cmd/simple_plan/datastore.dat

#--
* Manifesting An Improved Simple Plan

.code code/cmd/simple_plan_improved/main.go /^func main/,/^}/

`defer` manages a stack (LIFO) of functions called once the local scope ends.

#--
* Planning For Failures

"If you do not expect the unexpected you will not find it, for it is not to be reached by search or trail." - Heraclitus (535-475 BCE)

#--
* A Contingent Plan

.image svg/plan_short_errs.svg 510 _

#--
* Manifesting A Contingent Plan

.code code/cmd/contingent_plan/main.go /^func main/,/^}/

#--
* A Contingent Plan (Output)

terminal:
.code code/cmd/contingent_plan/terminal

out.txt:
.code code/cmd/contingent_plan/out.txt

datastore.dat:
.code code/cmd/contingent_plan/datastore.dat

#--
* A Contingent Plan (Output - Failure At `NewOutFile`)

terminal:

 2018/11/08 19:00:00 cannot create OutFile: open out.txt: permission denied

out.txt:
.code code/empty/empty

datastore.dat:
.code code/empty/empty

An empty "out.txt" is expected, but where's the behavior setup via `defer`?

#--
* Try As We Might

"There are two methods in software design. One is to make the program so simple, there are obviously no errors. The other is to make it so complicated, there are no obvious errors." - Tony Hoare (1934-)

#--
* Avoid Brutal Control Flow

Functions setup via `defer` will not be reached when using `panic`, or `os.Exit`.

`log.Fatal` functions print to `os.Stderr` and call `os.Exit(1)`.

.play code/a_brutal_control_flow/main.go /BGN/,/END/

#--
* Favor Graceful Control Flow

Move main logic out one level from the main func, but keep it nearby.

.play code/b_graceful_control_flow/main.go /BGN/,/END/

#--
* Graceful Flow With Codes

.play code/c_graceful_control_flow/main.go /BGN/,/END/

#--
* A Complete Plan

.image svg/plan_short_full.svg 510 _

#--
* Manifesting A Complete Plan

.code code/cmd/complete_plan/main.go /^func run/,/^}/

#--
* A Complete Plan Output

terminal:
.code code/cmd/complete_plan/terminal

out.txt:
.code code/cmd/complete_plan/out.txt

datastore.dat:
.code code/cmd/complete_plan/datastore.dat

#--
* A Complete Plan (Output - Failure At NewDataStore)

terminal (last line is from stderr):
.code code/cmd/complete_plan/error_output/terminal

out.txt:
.code code/empty/empty

datastore.dat:
.code code/cmd/complete_plan/error_output/datastore.dat

While an error was reached, everything has been accounted for.



###
* Errors Are Values

#--
* Assurable Control Flow

.code code/d_maybex/main.go /BGN/,/END/

Avoid nil-related errors. Compare with Elm:

.code code/d_maybex/src/maybex.elm /BGN/,/END/

#--
* Flexible Control Flow

.code code/e_typd/main.go /BGN/,/END/

Define behavior based on distinct possiblities. Compare with Python:

.code code/e_typd/typd.py /BGN/,/END/

#--
* Sensible Control Flow

  some code

#--
* Else
"Those who fail to plan are planning to fail." - Unknown/Many
OR
"Those who fail to plan for failures, are planning failures."
"Plan To Succeed By Planning For Failure"  ??

"No problem can be solved until it is reduced to some simple form. The changing of a vague difficulty into a specific, concrete form is a very essential element in thinking." - J. P. Morgan (1837-1913)
