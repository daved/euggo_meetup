###
Feeding Concurrent Processes
Excuse me, Plato, are you done with that fork?
3 Nov 2016
Tags: concurrency, channels



###
Daved
disjuncter@gmail.com
https://github.com/daved
https://github.com/codemodus



###
* CSP - Communicating Sequential Processes

#--
* An explicit implementation.

Channels are first-class primitives, conduits by which processes can communicate.

"Don't communicate by sharing memory, share memory by communicating."

.link https://www.youtube.com/watch?v=PAAkCSZUG1c&t=2m48s - Rob Pike "Go Proverbs @ Gopherfest 2015"

: Erlang is also based on CSP, but as in the original Hoare papers, the "conduits" are implicit.



###
* Project Resources

#--
* Interacting with the project.

Home

.link https://github.com/daved/conch

Get

    go get -u github.com/daved/conch/...  # "-u" forces update

Run

    # setup test files and run main app
    conchtestdata && conch

Kill

    # send SIGTERM to main app
    Ctrl+C



###
* Concurrent Handler

#--
* Concurrent File Handler Stages

**- Implement file handling.

- Gather gzipped file paths.
- Pre-process file info and contents.

**- Implement concurrent processing.
**- Test.

#--
* Final Directory Tree
    
    conch
    ├── conch.go
    ├── files.go
    └── main.go



###
* Project Diagram

.image svg/conch.svg 520 _



###
* Implement File Handling

#--
* Gather gzipped file paths from a directory:

.code conch/files.go /BGN1 OMIT/,/END1 OMIT/

.caption "files.go"

#--
* File data structure for additional handling:

.code conch/files.go /BGN2 OMIT/,/END2 OMIT/

.caption "files.go"



###
* Implement Concurrent Processing

#--
* Diagram Review For "Main" - Note the left block.

.image svg/conch.svg 520 _

#--
* Sketch Main (Create)

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLcreate

.caption "main.go"

#--
* Sketch Main (Run)

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLrun

.caption "main.go"

#--
* Sketch Main (Iterate)

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLiterate

.caption "main.go"

#--
* Sketch Main (Report)

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLreport

.caption "main.go"

#--
* Conch, New Func, and Done

.code conch/conch.go /BGN1 OMIT/,/END1 OMIT/

.caption "conch.go"

Closing the done channel facilitates "cancelation".

#--
* Diagram Review For "Run" - Note the right blocks.

.image svg/conch.svg 520 _

#--
* Run (Produce)

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLproduce

.caption "conch.go"

#--
* Run (Consume)

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLconsume

.caption "conch.go"

#--
* Run (Error Check)

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLerror

.caption "conch.go"

#--
* Diagram Review For "Produce" - Note the blue line.

.image svg/conch.svg 520 _

#--
* Produce

.code conch/conch.go /BGN3 OMIT/,/END3 OMIT/

.caption "conch.go"
 
#--
* Diagram Review For "Consume" - Note the red line.

.image svg/conch.svg 520 _

#--
* Consume

.code conch/conch.go /BGN4 OMIT/,/END4 OMIT/

.caption "conch.go"

#--
* Digest

.code conch/conch.go /BGN5 OMIT/,/END5 OMIT/

.caption "conch.go"



###
* Test

#--
* Diagram Review Before Testing

.image svg/conch.svg 520 _

#--
* This Slide Intentionally Left Blank

You're supposed to demo the application now.

###
* Acknowledgements

#--
* For ...

inspiration:
.link https://blog.golang.org/pipelines

being a great graphics tool:
.link https://www.draw.io

correcting cancelation in `conch.produce()`:
.link https://github.com/jazeee Jaz Singh @ EUG Go

suggesting a better way of handling the closing of channels:
.link https://twitter.com/gevgev66 Gevorg Gevorgyan @ Los Angeles Gophers
