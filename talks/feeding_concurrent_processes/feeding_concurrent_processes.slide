###
Feeding Concurrent Processes
Excuse me, Plato, please pass that fork.
4 Oct 2018
Tags: concurrency, channels



###
Daved
disjuncter@gmail.com
https://github.com/daved
https://github.com/codemodus



###
* CSP - Communicating Sequential Processes

#--
* An Explicit Implementation

Channels are first-class primitives, conduits by which processes can communicate.

"Don't communicate by sharing memory, share memory by communicating."

.link https://www.youtube.com/watch?v=PAAkCSZUG1c&t=2m48s - Rob Pike "Go Proverbs @ Gopherfest 2015"

: Erlang is also based on CSP, but as in the original Hoare papers, the "conduits" are implicit.



###
* Project Resources

#--
* Interacting With The Project

Home

.link https://github.com/daved/conch

Get

    go get -u github.com/daved/conch/...  # "-u" forces update

Run

    # setup test files and run main app
    conchtestdata && conch

Kill

    # send SIGTERM to main app
    Ctrl+C



###
* Concurrency Handler

#--
* Concurrency Handler Project Stages

**- Implement gzipped file handling.
**- Implement concurrency handling.
**- Test.

#--
* Final Directory Tree
    
    conch
    ├── conch.go
    ├── files.go
    └── main.go



###
* Implement File Handling

#--
* File Handling Components

**- Gzip Filepath Gatherer
**- File Info Type And Construction Function

Paths will be digested by the concurrency handler to create "fileInfo" instances.

#--
* Gzip Filepath Gatherer

.code conch/files.go /BGN1 OMIT/,/END1 OMIT/ HLargs

.caption "files.go"

#--
* File Info Type And Construction Function

.code conch/files.go /BGN2 OMIT/,/END2 OMIT/ HLargs

.caption "files.go"



###
* Implement Concurrency Handling

#--
* Concurrency Handling Components

**- Orchestrator
**- Producer
**- Consumer
**- Digestor

The orchestrator manages a producer and consumer along with shared wiring.

The consumer manages one or more digestors.

The orchestrator provides access to digested values and orchestration errors.

#--
* Project Diagram

.image svg/conch.svg 520 _

#--
* Orchestrator

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLargs

.caption "conch.go"

#--
* Orchestrator
{JUMP}

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLproduce

.caption "conch.go"

#--
* Orchestrator
{JUMP}

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLconsume

.caption "conch.go"

#--
* Orchestrator
{JUMP}

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLerror

.caption "conch.go"

#--
* Orchestrator (error Closure)

.code conch/conch.go /BGN21 OMIT/,/END21 OMIT/ HLargs

.caption "conch.go"

#--
* Orchestrator (error Closure)
{JUMP}

.code conch/conch.go /BGN21 OMIT/,/END21 OMIT/ HLstate

.caption "conch.go"

#--
* Orchestrator (error Closure)
{JUMP}

.code conch/conch.go /BGN21 OMIT/,/END21 OMIT/ HLerrorchan

.caption "conch.go"

#--
* Orchestrator

.code conch/conch.go /BGN2 OMIT/,/END2 OMIT/ HLreturn

.caption "conch.go"

#--
* Diagram Review

.image svg/conch.svg 520 _

#--
* Main

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLargs

.caption "main.go"

#--
* Main
{JUMP}

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLpaths

.caption "main.go"

#--
* Main
{JUMP}

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLdonechan

.caption "main.go"

#--
* Main
{JUMP}

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLprocess

.caption "main.go"

#--
* Main
{JUMP}

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLiterate

.caption "main.go"

#--
* Main
{JUMP}

.code conch/main.go /BGN1 OMIT/,/END1 OMIT/ HLreport

.caption "main.go"

#--
* Diagram Review

.image svg/conch.svg 520 _

#--
* Produce

.code conch/conch.go /BGN3 OMIT/,/END3 OMIT/ HLargs

.caption "conch.go"

#--
* Produce
{JUMP}

.code conch/conch.go /BGN3 OMIT/,/END3 OMIT/ HLchan

.caption "conch.go"

#--
* Produce
{JUMP}

.code conch/conch.go /BGN3 OMIT/,/END3 OMIT/ HLgoroutine

.caption "conch.go"

#--
* Produce (goroutine)

.code conch/conch.go /BGN31 OMIT/,/END31 OMIT/ HLgoroutine

.caption "conch.go"

#--
* Produce (goroutine)
{JUMP}

.code conch/conch.go /BGN31 OMIT/,/END31 OMIT/ HLclose

.caption "conch.go"

#--
* Produce (goroutine)
{JUMP}

.code conch/conch.go /BGN31 OMIT/,/END31 OMIT/ HLselect

.caption "conch.go"

#--
* Produce

.code conch/conch.go /BGN3 OMIT/,/END3 OMIT/ HLreturn

.caption "conch.go"

#--
* Diagram Review

.image svg/conch.svg 520 _

#--
* Consume

.code conch/conch.go /BGN4 OMIT/,/END4 OMIT/ HLargs

.caption "conch.go"

#--
* Consume
{JUMP}

.code conch/conch.go /BGN4 OMIT/,/END4 OMIT/ HLchan

.caption "conch.go"

#--
* Consume
{JUMP}

.code conch/conch.go /BGN4 OMIT/,/END4 OMIT/ HLgoroutine

.caption "conch.go"

#--
* Consume (goroutine)

.code conch/conch.go /BGN41 OMIT/,/END41 OMIT/ HLgoroutine

.caption "conch.go"

#--
* Consume (goroutine)
{JUMP}

.code conch/conch.go /BGN41 OMIT/,/END41 OMIT/ HLclose

.caption "conch.go"

#--
* Consume (goroutine)
{JUMP}

.code conch/conch.go /BGN41 OMIT/,/END41 OMIT/ HLwg

.caption "conch.go"

#--
* Consume (goroutine)
{JUMP}

.code conch/conch.go /BGN41 OMIT/,/END41 OMIT/ HLwidth

.caption "conch.go"

#--
* Consume (goroutine - goroutines)

.code conch/conch.go /BGN411 OMIT/,/END411 OMIT/ HLwidth

.caption "conch.go"

#--
* Consume (goroutine - goroutines)
{JUMP}

.code conch/conch.go /BGN411 OMIT/,/END411 OMIT/ HLgogoroutine

.caption "conch.go"

#--
* Consume (goroutine - goroutines)
{JUMP}

.code conch/conch.go /BGN411 OMIT/,/END411 OMIT/ HLdigest

.caption "conch.go"

#--
* Consume

.code conch/conch.go /BGN4 OMIT/,/END4 OMIT/ HLreturn

.caption "conch.go"

#--
* Diagram Review

.image svg/conch.svg 520 _

#--
* Digest

.code conch/conch.go /BGN5 OMIT/,/END5 OMIT/ HLargs

.caption "conch.go"

#--
* Digest
{JUMP}

.code conch/conch.go /BGN5 OMIT/,/END5 OMIT/ HLreceive

.caption "conch.go"

#--
* Digest
{JUMP}

.code conch/conch.go /BGN5 OMIT/,/END5 OMIT/ HLselect

.caption "conch.go"



###
* Test

#--
* This Slide Intentionally Left Blank

.caption * No, it's not actually blank, but you are supposed to demo the application now.

#--
* Final Diagram Review

.image svg/conch.svg 520 _



###
* Acknowledgements

#--
* For ...

learning:
.link https://blog.golang.org/pipelines

being a great graphics tool:
.link https://www.draw.io

correcting cancelation in `produce()`:
.link https://github.com/jazeee Jaz Singh @ EUG Go

suggesting a better way of handling the closing of channels:
.link https://twitter.com/gevgev66 Gevorg Gevorgyan @ Los Angeles Gophers
