###
Gopher It
An Intro To Go For Web Devs.
26 May 2016
Tags: introduction, getting started, web



###
Daved
disjuncter@gmail.com
https://github.com/daved
https://github.com/codemodus



###
* What

#--
* What is Go?

"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software."

.link https://golang.org - Golang.org/

- Released November 11th, 2009
- Created by Rob Pike, Ken Thompson, and Robert Griesemer
- In the C family; Influenced by Pascal/Modula/Oberon + CSP (Newsqueak/Limbo)
- Supported by Google

: - Go is {n} years old.
: - Pike/Thompson established/contributed to *nix world.
: |- Griesemer handled interpreters, files systems, and virtual machines. 
: - Conc based on Hoare's "Communicating Sequential Processes" (1985 book, not 1978 paper).
: | * net/http Server is fundamentally concurrent.
: - Supported by, but not controlled by Google; A mostly certain and open source future.

#--
* Overview

- Strongly, and statically typed
- Compiled (with runtime)
- Compiled quickly
- Garbage collected
- OO-like
- Concurrent

: - Type system prevents certain classes of errors.
: - No VM! Smallish binaries.
: - Compiler being reworked, recently bootstrapped (1.4).
: |- Compil time >=, and run speed <=. Losses almost fixes, gains expected.
: - GC has been reworked with large gains (e.g. 1.3 = 2-6s/10Gb, 1.6 = 10-15ms/100Gb+)
: - OOP possible, not pushed. Not many self-returning chains (e.g. This.Do.DoAnother).
: - * Concurrency is not parallelism.



###
* How

#--
* How did Go come to be?

Not exhaustively...

Ken Thompson is the author of B, the predecessor to C.  He was also a colleague of C author Dennis Ritchie.  Together they developed UNIX.

Alongside them at Bell Labs Rob Pike co-authored UTF-8 with Ken Thompson, developed Limbo, contributed to portions of UNIX, and wrote influential books on UNIX/programming with Brian W. Kernighan.

Robert Griesemer has worked on code generation for the V8 JS engine, the Java Hotspot VM, and a distributed lock manager for the Google File System.

#--
* How does Go excel?

Go is optimized for developers and modern processing

- Keyword count is low (25 vs [Python 33, Ruby 41, C 44, Java 50, PHP 65, C++ 84])
- Standard library is often enough
- Inheritance does not exist, but can be emulated (warning)
- Memory management is a non-issue
- Codebases are often cross-platform without additional work
- Concurrency is baked-in and primitives are reasonable
- Tooling prevents certain disputes: gofmt, go vet, golint
- Tooling eases documentation/testing: go doc, go test
- Runtime is included with binaries and they run quickly

: - Mins complexity for devs. Maxes rate of consumption and improves digestion.
: - Beyond stdlib, most packages are exceptionally stable.
: - James Gosling (Java) advocated to replace implemenation inhtce (extends) with interface inhtce (implements).
: |- "Implements" in go is implicit.
: | Inhtce emulated through composition (Gof4). Compos is only real way in go.
: |- Gang of Four "mantra" - "prefer composition over inheritance".
: - No memory management. Hooray!
: - Cross-platform edge cases can be worked around. 
: - Concurrency can be fun, novel, and easy to abuse/confuse initially. Not a primary need for web devs, but should grok to prevent race conds.
: - Tooling integrates easily with editors/ides. Run on save: save your work, time and sanity.
: -
: - cross-platform, and fast binaries... but for what architectures?

#--
* How does Go excel? (OS/Arch list)

    OS          Architecture
    ---------   ------------
    darwin      386, amd64, arm, arm64
    dragonfly        amd64
    freebsd     386, amd64, arm
    linux       386, amd64, arm, arm64, ppc64, ppc64le, mips64, mips64le
    netbsd      386, amd64, arm
    openbsd     386, amd64, arm
    plan9       386, amd64
    solaris          amd64
    windows     386, amd64



###
* Why

#--
* Why did Go come to be?

"No major systems language has emerged in over a decade, but over that time the computing landscape has changed tremendously. ...  We believe it's worth trying again with a new language, a concurrent, garbage-collected language with fast compilation."

.link https://golang.org/doc/faq#What_is_the_purpose_of_the_project - Golang.org/doc/faq#What_is_the_purpose_of_the_project

A much more expansive answer to this question is available in the article, [[https://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering.]]

#--
* Why use Go?

- Minimize development and maintenance time
- Make full use of modern processors
- Encourage testable code
- Improve documentation
- Reduce overhead when portability is needed



###
* Getting Started

#--
* IDEs

- Codebox IDE
- CodeEnv
- Eclipse IDE/GoClipse
- GoWorks
- JetBrains IntelliJ IDEA
- Komodo IDE
- LiteIDE
- Visual Studio / Visual Studio Code
- Wide
- Zeus

#--
* Editors 1/2

- Emacs
- Vi/Vim
- Atom
- Brackets
- Geany
- Gedit
- GNU Nano

#--
* Editors 2/2

- jEdit
- joe
- Komodo Edit
- Lime Text
- Notepad++
- Sublime Text
- Textadept
- TextMate

#--
* IDE or editor?  Either way.

The tools offered by the Go Team and the community cover so much ground that there is no great distinction between the capabilities of IDEs and text editors (apart from the interfaces).

For example, the following is a list of tools available in Vim using vim-go.

GoBuild, GoDeps, GoFmt, GoInfo, GoPath, GoTestFunc, GoCallees, GoDescribe, GoFreevars, GoInstall, GoPlay, GoUpdateBinaries, GoCallers, GoDoc, GoGenerate, GoInstallBinaries, GoReferrers, GoVet, GoCallstack, GoDocBrowser, GoImplements, GoLint, GoRename, GoChannelPeers, GoDrop, GoImport, GoMetaLinter, GoRun, GoCoverage, GoErrCheck, GoImportAs, GoOracleScope, GoTest, GoDef, GoFiles, GoImports, GoOracleTags, GoTestCompile

#--
* Installing Dependencies (Debian-based Linux)

Version Control:

   sudo apt-get install git mercurial

#--
* Installing Go (Linux)

Using Binary Releases:

    mkdir ~/storage && cd $_
    wget https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz   
    sudo tar -C /usr/local -zxf ~/storage/go1.6.2.linux-amd64.tar.gz   

- Building from source is possible, but isn't interesting enough to cover at this time.

Setup PATH/GOPATH:

    mkdir ~/gocode
    echo -e "\n"'export PATH=${PATH}:/usr/local/go/bin:${HOME}/gocode/bin' >> ~/.profile
    echo 'export GOPATH=${HOME}/gocode' >> ~/.profile && source ~/.profile

: - PATH is obvious for most, but what about GOPATH?
: | GOPATH is location of go source. Can be multiple dirs, best to centralize.
: | | Important later depending on package vendoring solution.

#--
* Additional Environment Variables (Linux)

GOROOT is only relevant when installing Go to a non-standard location.

    // Example of setting GOROOT - *Not likely needed*
    echo -e "\n"'export GOROOT=${HOME}/go' >> ~/.profile && source ~/.profile

: - Go source code is sum of /usr/local/go, or GOROOT if set, plus GOPATH.
: - PATH: binaries, GOPATH: source (import, build, etc), GOROOT: alternate install loc.

#--
* Uninstalling Go

- Remove `/usr/local/go` or custom GOROOT directory.
- Remove GOPATH export, and GOROOT export if existing. 
- Remove Go-related paths from PATH environment variable.



###
* Hello Eugene

#--
* Hello World (stdout)

.play hw_stdout/main.go

: - Binaries are all named "main". Libs named most anything, keep it simple.

#--
* Hello World (http)

.play hw_http/main.go

: - Functions are first-class.
: | And heavily used in go. Some funcs return funcs that return funcs.
: - mux is an http.Handler.
: | http.Handler is likely to be a web devs favorite interface.

#--
* Hello World (http.Handler)

    type Handler interface {
            ServeHTTP(ResponseWriter, *Request)
    }

``

    type ServeMux
        func NewServeMux() *ServeMux
        func (mux *ServeMux) Handle(pattern string, handler Handler)
        func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))
        func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)
        func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)

: - Anything that has a ServeHTTP method with this signature is an http.Handler.



###
* Databases, Testing, and Deployment

#--
* Using A Database

.play db0/main.go /START OMIT/,/END OMIT/

: - package and import declarations are excluded.
: - Single line assignment/conditionals save room. Use wisely due to scoping.

#--
* Testing (Basis)

.code work/work.go

.caption "work/work.go"

#--
* Testing (Test Func)

.code work/work_test.go

.caption "work/work_test.go"

: - Testing facilities are mostly aimed at unit testing.
: - Functional testing is not too hard.
: - Integration testing might require creativity, or an integ testing tool.

#--
* Testing (Testing And Other Commands)
Run all tests:

    go test

Run a simple app:

    go run {files}

Build an app:

    go build -o {binary}

#--
* Deployment

- scp + service restart
- blueGreen to minimize downtime/risks.
- wercker/heroku/google app engine
- Have complex needs or simply like config files? The cloud is the limit.

#--
* Deployment (Additional - systemd Unit File)

.code systemd/gosysd.service

#--
* Deployment (Additional - app ready for service)

.iframe systemd/main.go.html 576 980



###
* Resources

#--
* Online Resources

- [[https://golang.org/][The front door: golang.org]]
- [[https://play.golang.org/][The playground: play.golang.org]]
- [[https://meetup.euggo.org/][This presentation and others: meetup.euggo.org]]
- #go-nuts on irc.freenode.net
- [[https://reddit.com/r/golang][Go on Reddit]]
- [[https://groups.google.com/group/golang-nuts][Go Nuts mailing list]]
- [[https://forum.golangbridge.org/][Go Forum]]
- [[https://blog.gopheracademy.com/gophers-slack-community/][Gopher's slack community]]

#--
* Online Resources For Offline Resources

- [[http://www.gopl.io/][The Go Programming Language - Alan A. A. Donovan, Brian Kernighan]]
- [[https://www.meetup.com/eug-go][Go in Eugene (Meetup.com)]]
- [[https://www.euggo.org][Go in Eugene (homepage)]]
