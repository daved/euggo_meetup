###
Go RPC With gRPC
Cross-platform, cross-language, simply.
6 Oct 2016
Tags: api, rpc, grpc, app



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* RPC - Remote Procedure Call

#--
* What's old is new again.

RPC: Simplified-for-caller remote subroutine execution.

1960s - Materialization

1970s - Formalization

1980s - Stablization

1990s - Popularization

2000s - Depopularization

2010s - Repopularization



###
* Project Resources

#--
* 

Home

.link https://github.com/daved/grpcbasic0

Get

    go get -u github.com/daved/grpcbasic0/...  # "-u" forces update

Run

    # run both apps in the background
    grpcbasic0 & grpcbasic0http &

Kill

    # send SIGTERM to both apps
    pkill grpcbasic0



###
* RPC Server Example

#--
* Server Project Stages

**- Define Expectations
**- Generate Code
**- Implement Logic

#--
* Final Directory Tree

    grpcbasic0
    ├── cmd
    │   ├── grpcbasic0
    │   │   ├── main.go
    │   │   └── rpc.go
    │   └── grpcbasic0http
    │       └── main.go
    ├── pb
    │   ├── gogen.go
    │   ├── grpcbasic0.pb.go
    │   ├── grpcbasic0.pb.gw.go
    │   └── grpcbasic0.swagger.json
    └── proto
        └── grpcbasic0.proto

#--
* Define Expectations (Stage 1/3)

- Messages (structures) using the Interface Definition Language "Protocol Buffers"
- Services (subroutines) using the proto3 plugin "go"
- HTTP paths using the proto3 plugin "grpc-gateway"

#--
* Generate Code (Stage 2/3)

- Go: types, interfaces, stubs (for developing gRPC server/client)
- Go: reverse-proxy (for developing gRPC-gateway server)
- JSON: OpenAPI definition (for client consumption: developer or tooling)


###
* Implement Logic (Stage 3/3)

- RPC Endpoints/Server
- HTTP Reverse-proxy Server



###
* Using The IDL

#--
* Start Proto File

.code a_define/proto/grpcbasic0.proto /START1 OMIT/,/END1 OMIT/

.caption "proto/grpcbasic0.proto" (1/3)

#--
* Define Messages

.code a_define/proto/grpcbasic0.proto /START2 OMIT/,/END2 OMIT/

.caption "proto/grpcbasic0.proto" (2/3)

#--
* Define Services And Related HTTP Paths

.code a_define/proto/grpcbasic0.proto /START3 OMIT/,/END3 OMIT/

.caption "proto/grpcbasic0.proto" (3/3)

#--
* Generate gRPC Server, Go code, and OpenAPI Definition

.code b_gogen/pb/gogen.go

.caption "pb/gogen.go"

Now these commands can be run using `go generate`.

But what do the go generate declarations contain? From a typical command line:

.code b_gogen/pb/gogen.txt



###
* RPC Server Setup

#--
* Implement Service Interface (1/2)

.code c_setup_server/grpcbasic0/rpc.go /START1 OMIT/,/END1 OMIT/

.caption "cmd/grpcbasic0/rpc.go" (1/2)

#--
* Implement Service Interface (2/2)

.code c_setup_server/grpcbasic0/rpc.go /START2 OMIT/,/END2 OMIT/

.caption "cmd/grpcbasic0/rpc.go" (2/2)

#--
* Implement gRPC Server

.code c_setup_server/grpcbasic0/main.go /START1 OMIT/,/END1 OMIT/

In main():
.code c_setup_server/grpcbasic0/main.go /START2 OMIT/,/END2 OMIT/

.caption "cmd/grpcbasic0/main.go"



###
* Intermission

#--
* A Minor Reflection

In a pinch, this is now enough for us to deploy our microservice.

However, what about ...

- Circuit breaking
- Load balancing
- Authentication
- Authorization
- Logging/Tracing across boundaries
- Etc.



###
* HTTP API Server Setup

#--
* Implement Reverse-proxy Server (1/2)

.code d_setup_http_api/grpcbasic0http/main.go /START1 OMIT/,/END1 OMIT/

.caption "cmd/grpcbasic0http/main.go" (1/2)

#--
* Implement Reverse-proxy Server (2/2)

In main():

.code d_setup_http_api/grpcbasic0http/main.go /START2 OMIT/,/END2 OMIT/

.caption "cmd/grpcbasic0http/main.go" (2/2)



###
* Additional Project Resources

#--
* Interact via SwaggerUI

Get

    go get -u github.com/codemodus/swagui/cmd/swagui

Run

    swagui

Visit

    http://localhost:2288/?url=http://localhost:3343/v1/swagger.json

.caption :2288 is the swagui default port, and :3343 is the HTTP API default port.
.caption To note, the RPC Server default port is :3323



###
* Dependencies

#--
* A Rough List

.link https://developers.google.com/protocol-buffers  proto3

.link http://www.grpc.io gRPC (proto3 plugin)

.link https://github.com/grpc-ecosystem/grpc-gateway gRPC-gateway (proto3 plugin)

.link https://github.com/codemodus/swagui swagui
