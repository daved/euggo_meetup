###
Strings And Things
Unicode handling in Go.
2 Aug 2018
Tags: unicode, utf8, rune, string, []byte, slice of bytes



###
Daved
disjuncter@gmail.com
https://github.com/daved



###
* Strings

#--
* Let's Handle Some Text!

Request: Make every other letter within a string uppercased.

.image https://storage.euggo.org/present/img/rice_porridge.jpg 460 _

.caption Å være midt i smørøyet. / To be in the middle of the butter's eye. (To be in a fantastic place.)

#--
* The Plan

- Write a unit test.
- Implement the subroutine.
- Run the unit test.
- Repeat step 2 and 3 as needed.



###
* Unit Testing

#--
* Go has a useful and thorough testing library.

Valid tests:

**- use the prefix "Test".
**- receive a pointer to the testing.T type.

.code a_unit_test/caselib/caselib_test_.go /^func/,//

#--
* Unit tests in Go are table-driven.

.code a_unit_test/caselib/caselib_test_.go /BGN2/,/END2/

.caption caselib/caselib_test.go

: A slice (dynamic array) of anonymous structs is assigned to `tests`.
: Slice literals and struct literals look similar. Line formatting eases readability.
: Struct field names are not required in cases such as this.

#--
* Unit tests in Go are table-driven. (Details)

.code a_unit_test/caselib/caselib_test_.go /BGN3/,/END3/

.caption caselib/caselib_test.go

#--
* One Test Framework, Please. Hold The Assertions.

.link https://golang.org/doc/faq#assertions Idiomatic Go favors direct handling of types.

.code a_unit_test/caselib/caselib_test_.go /BGN4/,/END4/

.caption caselib/caselib_test.go

: Third-party assertion libraries:
: /1 slightly decrease line count.
: But, they:
: /1 require learning an additional type system. /2 reduce readability. 
: /3 increase character count. /4 introduce a dependency.

#--
* The Test (Full View)

.code a_unit_test/caselib/caselib_test_.go /START1 OMIT/,/END1 OMIT/

.caption caselib/caselib_test.go



###
* First Implementation

#--
* Non Implementation

.code a_unit_test/caselib/caselib.go

.caption caselib/caselib.go

#--
* Run it!

.code a_unit_test/caselib/caselib_test_.go /START1 OMIT/,/END1 OMIT/

.caption caselib/caselib_test.go

.play runtest/a_unit_test/main.go /START1 OMIT/,/END1 OMIT/

: Tests are normally run from the command line using the `go test` tool.



###
* Second Implementation

#--
* Naive Implementation

.code b_unit_test/caselib/caselib.go /^func/,/^}/

.caption caselib/caselib.go

.play runtest/b_unit_test/main.go /START1 OMIT/,/END1 OMIT/

: using a c-style for loop...
: build a string while tracking uppercase status...
: if the supposed character is a space, add to string...
: otherwise, tolower or toupper and add to string



###
* Dissecting A `string`

#--
* C-style Loop (sliced `string`)

.play c_string_loop/main.go /BGN1/,/END1/

: This prints the current index, and the type and value of the sliced data.
: Slicing a string returns a string.
: To understand why the characters are corrupted, let's look at indexed strings.

#--
* C-style Loop (`string` index)

.play d_string_loop/main.go /BGN1/,/END1/

: This prints the current index, and the type and value of the indexed data.
: Notice that the length of the string is 8 while there are only 6 chracters.
: Also note the first three values: 195, 165, 32...
: and they are all uint8

#--
* Some `string` Details

- `string` tracks an underlying array of bytes and a length.
- Iterating over a string using an index traverses the underlying array of bytes.

.image https://storage.euggo.org/present/img/string_struct.png _ 264

.caption credit: https://research.swtch.com/godata



###
* Unicode / UTF-8

#--
* Raw Bytes From A String? Let's talk about encodings.

Unicode maps all written characters, marks, etc. to numeric values.
There are 17 "planes", each with a 16 bit space (1114112 values total). 
This is currently a >= 21 bit space (>= 2097152 values).

 Character              a
 Name                   LATIN SMALL LETTER A
 Unicode (decimal/hex)  97 / 0x00000061
 Unicode (binary)       00000000 00000000 00000000 01100001

 Character              勇
 Name                   CJK COMPATIBILITY IDEOGRAPH-2F825
 Unicode (decimal/hex)  194597 / 0x0002F825
 Unicode (binary)       00000000 00000010 11111000 00100101
 
: Unicode code point 194597 requires 24 bit space to ensure uniqueness.
: Go does not have a 24 bit type, so a 32 bit type will be required (and is a common path).

#--
* I heard you like encoding.

The UTF-8 (Unicode Transformation Format 8) encoding:

**- is a way of optimizing (for space) the communication of unicode code points.
**- uses from 1 to 4 bytes to communicate a unicode code point.

 Character              a
 Name                   LATIN SMALL LETTER A
 Unicode (decimal/hex)  97 / 0x00000061
 Unicode (binary)       00000000 00000000 00000000 01100001
 UTF-8 (binary)         01100001
 UTF-8 (decimal/hex)    97 / 0x61

: UTF-8 "flags" the first bits of the first byte in a sequence to show sequence length. 

#--
* Unicode Examples With UTF-8

 Character              勇
 Name                   CJK COMPATIBILITY IDEOGRAPH-2F825
 Unicode (decimal/hex)  194597 / 0x0002F825
 Unicode (binary)       00000000 00000010 11111000 00100101
 UTF-8 (binary)         11110000:10101111:10100000:10100101
 UTF-8 (decimal/hex)    240:175:160:165 / 0xF0 0xAF 0xA0 0xA5

 Character              å
 Name                   LATIN SMALL LETTER A WITH RING ABOVE
 Unicode (decimal/hex)  229 / 0x000000E5
 Unicode (binary)       00000000 00000000 00000000 11100101
 UTF-8 (binary)         11000011:10100101
 UTF-8 (decimal/hex)    195:165 / 0xC3 0xA5

: Notables:
: The utf8 decimal value for the "å" is 195,165 and is 2 bytes.
: The unicode code point for the "å" is 229 (which is one >16 bit space value).

#--
* More Unicode Examples

.image https://storage.euggo.org/present/img/unicode_example_1.png _ 560

.caption [[https://en.wikipedia.org/wiki/CJK_Compatibility_Ideographs_Supplement][Wikipedia: CJK Compatability Ideographs Supplement]]



###
* Dissecting A `string` (Again)

#--
* Range Loop

.play e_string_loop/main.go /BGN1/,/END1/

: This prints the current index, the type of the value range returns,
: the digital representation of the value range returns, and string representation of the value range returns.
: -
: It should be interesting to us that the index jumps.

#--
* Range Loop And `string`

- Ranging over a `string` actively interprets the utf8 encoded bytes.
- The "current index" is tracked/skipped as though iterating over a slice of bytes.
- Instead of the value being a `byte`, the value _starting_ at the index is a `rune`.

*** `byte` is an alias for `uint8`
*** `rune` is an alias for `int32`

: UTF8 uses bytes (8 bits).
: Again, unicode exceeds 16 bit space (int32 covers this safely).
: "starting" is italicized because a single rune may be directly related to up to 4 interpreted bytes.


###
* Final Implementation(s)

#--
* Your Implementation

.link https://play.golang.org/p/viTThDyEL03 play.golang.org/p/viTThDyEL03

.link https://www.euggo.org/ln/strings-and-things www.euggo.org/ln/strings-and-things

: If you'd like, you're welcome to solve this. We can pause for a bit if anyone is interested.

#--
* Obvious Implementation

.code f_unit_test/caselib/caselib.go /^func/,/^}/

.caption caselib/caselib.go

.play runtest/f_unit_test/main.go /START1 OMIT/,/END1 OMIT/

: using a range loop...
: build a slice of bytes while tracking uppercase status...
: if the character is not a letter, add to string...
: otherwise, tolower or toupper and add to string

#--
* Improved Implementation

.code g_unit_test/caselib/caselib.go /^func/,/^}/

.caption caselib/caselib.go

.play runtest/g_unit_test/main.go /START1 OMIT/,/END1 OMIT/

Provided by Nilium via #go-nuts on freenode.net:

.link https://github.com/nilium Github/nilium
.link https://twitter.com/nilium Twitter/nilium

: using the standard library string map function...
: provide an anonymous function to be called on each rune...
: that swaps casing function every other letter



###
* More To Consider

#--
* Multi-point Characters / Combining Marks

.play h_gotcha_norm_form/main.go /BGN1 OMIT/,/END1 OMIT/

#--
* Unicode Normal Forms

 U+006F        = o
 U+0300        = ̀
 U+006F/U+0300 = ò NFD (Decomposed)
 U+00F2        = ò NFC (Composed)

 U+006F/U+0300 equates to U+00F2

**- NFD Normalization Form Canonical Decomposition
**- NFC Normalization Form Canonical Composition
**- NFKD Normalization Form Compatibility Decomposition
**- NFKC Normalization Form Compatibility Composition

.link https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms Normal Forms

: The "u+" prefix indicates that the following hex value is intended to represent a unicode code point.

#--
* Combining Marks Fix Attempt

.play i_gotcha_fix_norm_form/main.go /BGN1 OMIT/,/END1 OMIT/

.link https://godoc.org/golang.org/x/text/unicode/norm golang.org/x/text/unicode/norm to the rescue! sort of...

#--
* Night Of The Living Code Points

Not all decomposed characters have composed equivalents!

Text handling may require:

- decomposition to ensure equality.
- special logic based upon language-specific expectations.

*** Keep in mind that there are languages that read from right to left.

: Showing consideration to all users should make us question if we've been accurate and thorough.
: If it's important, contact a linguist.

#--
* (Not So) Quick And Dirty Fix

.play j_gotcha_fix_norm_form/main.go /BGN1 OMIT/,/END1 OMIT/

.caption *This is not thoroughly tested.



###
* Even More To Consider

#--
* Malformed Data

.play k_gotcha_malformed/main.go /BGN1 OMIT/,/END1 OMIT/

#--
* Sorry Not Sorry

There is no fix for malformed strings just as there is no "fix" for bad logic.

: Except, of course, by reforming the data/logic correctly from the start.



###
* Summary

* Summary

- A `string` tracks an underlying `byte` array and a length.
- A `string` index ("s[i]") returns an individual `byte`.
- Bytes from a `string` derived from Unicode code points are UTF-8 formatted. 
- A sliced `string` ("s[i:j]") returns a `string` (may be malformed UTF-8).
- Ranging over a `string` provides `rune` access via UTF-8 interpretation.
- A `rune` represents a Unicode code point.
- *Text handling should generally rely on relevant libraries.
- *Thorough text handling often requires highly specialized knowledge.
